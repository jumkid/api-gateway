### self defined variables, use them with anchor. Not part of the configuration ###
Variables:
  anyHost: &anyHost '*'
  keycloakClientId: &keycloakClientId ${KEYCLOAK_CLIENT_ID:-"'api-gateway'"}
  keycloakClientSecret: &keycloakClientSecret ${KEYCLOAK_CLIENT_SECRET:-"'282cf0bd-e670-448a-9a8a-811f4cad0188'"}
  keycloakServiceUrl: &keycloakServiceUrl ${KEYCLOAK_SERIVCE_URL:-'http://keycloak:8080'}
  activityServiceUrl: &activityServiceUrl ${ACTIVITY_SERIVCE_URL:-'http://127.0.0.1:8081'}
  contentVaultUrl: &contentVaultUrl ${CONTENT_VAULT_URL:-'http://127.0.0.1:8082'}
### self defined variables - end ###

http:
  port: 80

admin:
  port: 9876
  host: localhost

apiEndpoints:  
  N/A:
    - host: *anyHost
      paths: '/not-available-api'
      methods: ["GET", "POST", "PUT", "DELETE"]

  login:
    - host: *anyHost
      paths: '/signin'
      methods: ["POST"]    

  content:
    - host: *anyHost
      paths: '/content/:id'
      methods: ["GET"]
    - host: *anyHost
      paths: '/content/trash'
      methods: ["GET"]  
    - host: *anyHost
      paths: '/content/html/:id'
      methods: ["GET"]  
    - host: *anyHost
      paths: '/streaming-content/:id'
      methods: ["GET"]
    - host: *anyHost
      paths: '/thumbnail-content/:id'
      methods: ["GET"]
    - host: *anyHost
      paths: '/content/download/:id'
      methods: ["GET"]    
    - host: *anyHost
      paths: '/content'
      methods: ["POST"]
    - host: *anyHost
      paths: '/content/html'
      methods: ["POST"]  
    - host: *anyHost
      paths: '/content/upload'
      methods: ["POST"]
  
  content-metadata:
    - host: *anyHost
      paths: '/content/metadata/:id'
      methods: ["GET"]
    - host: *anyHost
      paths: '/content/metadata/search'
      methods: ["GET"]  
    - host: *anyHost
      paths: '/content/:id'
      methods: ["DELETE"]
    - host: *anyHost
      paths: '/content/trash'
      methods: ["DELETE"]  

serviceEndpoints:
  keycloak:
    url: *keycloakServiceUrl
  content-vault:
    url: *contentVaultUrl

policies:
  - basic-auth
  - cors
  - expression
  - key-auth
  - log
  - oauth2
  - proxy
  - rate-limit
  - request-transformer
  - terminate

pipelines:
  loginApi:
    apiEndpoints:
      - login
    policies:
      - expression:
        - action:
            jscode: |
                    req.url = '/auth/realms/jumkid/protocol/openid-connect/token';
      - request-transformer:
        - action:
            body:
              add:
                client_id: *keycloakClientId
                client_secret: *keycloakClientSecret
                grant_type: "'password'"
      - log:
        - action:
            message: ${req.url}
      - proxy:
          - action:
              serviceEndpoint: keycloak
              changeOrigin: true
  contentApi:
    apiEndpoints:
      - content
    policies:
      - expression:
        - action:
            jscode: |
                    let reqUrl = req.url.split('/'), contentId = req.params.id;
                    if (req.method == 'GET') {
                      if (reqUrl[1] == 'streaming-content') { req.url = '/content/stream/' + contentId; }
                      else if (reqUrl[1] == 'thumbnail-content') { req.url = '/content/thumbnail/' + contentId; }
                      else if (reqUrl[2] == 'download') { req.url = '/file/download/' + contentId; }
                      else if (reqUrl[2] == 'trash') { req.url = '/trash'; } 
                    } else if (req.method == 'POST') {
                      if (reqUrl[2] == 'upload') { req.url = '/file/upload'; }
                    }
      - log:
        - action:
            message: ${req.url}
      - proxy:
          - action:
              serviceEndpoint: content-vault 
              changeOrigin: true

  contentMetaApi:
    apiEndpoints:
      - content-metadata
    policies:
      - expression:
        - action:
            jscode: |
                    let reqUrl = req.url.split('/'), contentId = req.params.id;
                    if (req.method == 'GET') {
                      if (contentId == 'search') {
                        let query = req.url.split('?');
                        req.url = "/metadata" + (query.length >= 2 ? "?" + query[1] : "");  
                      }
                      else { req.url = "/metadata/" + contentId; }
                    } else if (req.method == 'DELETE') {
                      if (reqUrl[2] == 'trash') { req.url = '/trash'; }
                    }
      - log:
        - action:
            message: ${req.url}
      - proxy:
          - action:
              serviceEndpoint: content-vault 
              changeOrigin: true

  N/A:
    apiEndpoints:
      - N/A
    policies:
      - terminate:
          statusCode: 501
          message: 'Opps! this api is not yet available'
