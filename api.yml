openapi: 3.0.3
info:
  version: v1
  title: API Gateway
  description: Apit gateway project which follows the OpenAPI spec
  termsOfService: 'https://www.jumkid.com/terms-of-use'
  contact:
    name: Chooli Yip
    url: jumkid.com
    email: chooli.yip@gmail.com
  license:
    name: Jumkid Public License
    url: 'http://license.jumkid.com'
servers:
  - description: Testing
    url: 'http://test.jumkid.com'
  - description: Live production
    url: 'http://api.jumkid.com'
tags:
  - name: v1
    description: API for version 1.0.0
  - name: test
    description: API for test
security:
  - bearerAuth: []

paths:
  '/content/{contentId}':
    get:
      tags:
        - test
      operationId: getTextContent
      description: get plain text content by id
      parameters:
        - name: contentId
          in: path
          required: true
          description: content identifier
          schema:
            type: string
        - name: title
          in: query
          required: false
          description: title
          schema:
            type: string    
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string

    delete:
      tags:
        - test
      operationId: deleteContent  
      description: remove content by id
      parameters:
        - name: contentId
          in: path
          required: true
          description: content identifier
          schema:
            type: string
      responses:
        '204':
            description: no content
  '/content':
    post:
      tags:
        - test
      operationId: addTextContent
      description: add text content by id
      parameters:
        - name: title
          in: query
          required: false
          description: title
          schema:
            type: string
        - name: content
          in: query
          required: false
          description: content
          schema:
            type: string    
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string          
  '/content/html/{contentId}':
      get:
        tags:
          - test
        operationId: getHtmlContent
        description: get html content by id
        parameters:
          - name: contentId
            in: path
            required: true
            description: content identifier
            schema:
              type: string
          - name: title
            in: query
            required: false
            description: title
            schema:
              type: string       
        responses:
          '200':
            description: OK
            content:
              application/json:
                schema:
                  type: string
  '/content/html':
    post:
      tags:
        - test
      operationId: addHtmlContent
      description: add text content by id
      parameters:
        - name: title
          in: query
          required: false
          description: title
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary      
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string                     
  '/streaming-content/{contentId}':
    get:
      tags:
        - test
      operationId: getStreamingContent  
      description: get streaming content by id
      parameters:
        - name: contentId
          in: path
          required: true
          description: content identifier
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary

  '/thumbnail-content/{contentId}':
    get:
      tags:
        - test
      operationId: getThumbnailContent  
      description: get thumbnail content by id
      parameters:
        - name: contentId
          in: path
          required: true
          description: content identifier
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary

  '/content/metadata/{contentId}':
    get:
      tags:
        - test
      operationId: getContentMetadata
      description: get content metadata by id
      parameters:
        - name: contentId
          in: path
          required: true
          description: content identifier
          schema:
            type: string
      responses:
          '200':
            description: OK
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Metadata'
    put:
      tags:
        - v1
      operationId: updateMetadata
      description: update metadata for media file
      parameters:
        - name: contentId
          in: path
          required: true
          description: mediafile identifier
          schema:
            type: string
        - name: mediaFileField
          in: query
          required: true
          description: mediaFile field name
          schema:
            $ref: '#/components/schemas/MediaFileField'
        - name: mediaFileFieldValue
          in: query
          required: true
          description: mediaFile field value
          schema:
            type: string  
      requestBody:
        description: metadata json object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Metadata'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Metadata'
  '/content/metadata/search':
    get:
      tags:
        - test
      operationId: searchContentMetadata
      description: search content metadata by query parameter
      parameters:
        - name: q
          in: query
          required: false
          description: query string
          schema:
            type: string
        - name: size
          in: query
          required: false
          description: size of result set
          schema:
            type: integer    
      responses:
          '200':
            description: OK
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Metadata'

  '/content/upload':
    post:
      tags:
        - test
      operationId: upload
      description: upload a file as content
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      parameters:
        - schema:
            type: array
          in: query
          name: tags
          description: a list of tags            
      responses:
        '202':
          description: save a new content in plain format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Metadata'

  '/content/download/{contentId}':
    get:
      tags:
        - test
      operationId: downloadContent  
      description: download content by id
      parameters:
        - name: contentId
          in: path
          required: true
          description: content identifier
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary            

## Gallery API
  '/gallery':
    post:
      tags:
        - v1
      operationId: uploadGallery
      description: upload multiple file as gallery
      parameters:
        - name: title
          in: query
          required: true
          schema:
            type: string
        - name: content
          in: query
          required: false
          schema:
            type: string
        - name: files
          in: query
          required: false
          schema:
            type: array
            format: file
        - name: tags
          in: query
          required: false
          schema:
            type: array
            format: string    
      responses:
        '202':
          description: upload a gallery with multiple files
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Metadata'
  '/gallery/{id}':
    put:
      tags:
        - v1
      operationId: updateGallery
      description: update a gallery
      parameters:
        - name: id
          in: path
          required: true
          description: gallery identifier
          schema:
            type: string
        - name: mediaFileIds
          in: query
          required: false
          schema:
            type: array
            format: string
          description: a list of media file id
        - name: files
          in: query
          required: false
          schema:
            type: array
            format: file
        - name: tags
          in: query
          required: false
          schema:
            type: array
            format: string
        - name: title
          in: query
          required: false
          schema:
            type: string
        - name: content
          in: query
          required: false
          schema:
            type: string
      responses:
        '202':
          description: updated a gallery
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Metadata'

components:
  schemas:
    Metadata:
      description: Model of content metadata
      properties:
        id:
          type: string
          example: 1mWG-nQBWmmN0po1BUoG
        filename:
          type: string
          example: foo.txt
        mimeType:
          type: string
          example: text/plain
        size:
          type: integer
          description: file size in byte
        title:
          type: string
        content:
          type: string
        activated:
          type: boolean
        createdBy:
          type: string
        creationDate:
          $ref: ./share.yml#/components/schemas/LocalDateTime
        modifiedBy:
          type: string
        modificationDate:
          $ref: ./share.yml#/components/schemas/LocalDateTime
        props:
          type: array
          items:
            description: list of additional properties
            properties:
              name:
                type: string
              textValue:
                type: string
              dateValue:
                 $ref: ./share.yml#/components/schemas/LocalDateTime
              numberValue:
                type: integer   
        tags:
          type: array
          items:
            description: list of tags
            type: string
        children:
          type: array
          items:
            $ref: '#/components/schemas/Metadata'
    ThumbnailSize:
      type: string
      enum:
        - small
        - medium
        - large
    MediaFileField:
      type: string
      enum:
        - title
        - filename
        - mimeType
        - module
        - content
    MediaFileModule:
      type: string
      enum:
        - FILE
        - TEXT
        - HTML
        - GALLERY